#!/usr/bin/env python3

import os
import json
import argparse
import logging
from shutil import rmtree
from os import remove

from cilib import command, file_system, helm

logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.INFO)
logger = logging.getLogger()

script_desc = """
Issue a release:
 - create a GitHub release (aborting if existing)
 - upload the chart with "real" version (clobbering if existing)
"""


class ReleaseException(Exception):
    pass


def main(verbose=True):
    class PrepareUrl(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            if "://" not in values:
                values = "https://" + values
            if not values.endswith("/"):
                values +="/"
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser(script_desc)
    parser.add_argument(
        "github_repo",
        help="As owner/repo",
    )
    parser.add_argument("chart")
    parser.add_argument(
        "github_creds",
        help="As uname:PAT (personal access token)",
    )
    parser.add_argument("helm_repo_url", action=PrepareUrl)
    parser.add_argument(
        "helm_repo_creds",
        help="as uname:passw",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
    )
    parser.add_argument(
        "--ref",
        default="HEAD",
    )
    parser.add_argument(
        "--docker-tag",
        help="If given, will be included in the release description",
    )

    args = parser.parse_args()

    os.chdir(file_system.get_repo_base_dir())

    tags = command.get_output(["git", "tag", "--points-at", args.ref]).splitlines()

    releases = json.loads(
        command.get_output(
            [
                "curl",
                f"https://api.github.com/repos/{args.github_repo}/releases",
                "-u",
                args.github_creds,
                "-H",
                "Accept: application/vnd.github.v3+json",
            ]
        )
    )

    # using github releases as a reference as to whether it has been released or not
    releases_per_tag = {r["tag_name"]: r for r in releases}
    tags_to_release = [t for t in tags if t not in releases_per_tag]
    if not tags_to_release:
        logger.warning(f"Nothing to do, as releases already exist for {tags}")
        return 0
    logger.info(f"Releasing: {tags_to_release}")

    for tag in tags_to_release:
        unstable_version = command.get_output(
            [
                "ci/version",
                "--insert-prerelease",
                "unstable",
                "--ref",
                args.ref,
            ]
        )
        final_version = command.get_output(["ci/version", "--ref", args.ref])

        # download chart, reupload final version
        helm.download(
            args.helm_repo_url,
            args.helm_repo_creds,
            args.chart,
            unstable_version,
            output_filename=f"{args.chart}-{unstable_version}.tgz",
        )
        command.run(["tar", "xzf", f"{args.chart}-{unstable_version}.tgz"])
        command.run(["helm", "package", args.chart, "--version", final_version])
        rmtree(args.chart)
        remove(f"{args.chart}-{unstable_version}.tgz")

        existing_packages_same_version = helm.get_matching_urls(
            args.helm_repo_url, args.helm_repo_creds, args.chart, final_version
        )
        # making sure there isn't a package with the same version,
        # only differing by build metadata
        if len(existing_packages_same_version) > 0:
            raise ReleaseException(
                "A package with different build metadata "
                + "but identical version already exists: "
                + f"{existing_packages_same_version} (our version: {final_version})"
            )

        if args.dry_run:
            logger.info(
                f"Stopping the release of {tag} ({final_version}) as this is a dry run"
            )
            continue

        try:
            helm.upload(
                args.helm_repo_url,
                args.helm_repo_creds,
                f"{args.chart}-{final_version}.tgz",
            )
        except helm.AlreadyExtantChartException as e:
            raise e
        except Exception as e:
            raise ReleaseException(f"Couldn't upload new chart to repo: {e}")

        # issue Github release

        gh_release_body=f"Version: `{final_version}`\nHelm chart URL: {helm.get_url(args.helm_repo_url, args.helm_repo_creds, args.chart, final_version)}"
        if args.docker_tag:
            gh_release_body+=f"\nDocker tag: `{args.docker_tag}`"
        
        release = json.loads(
            command.get_output(
                [
                    "curl",
                    "-X",
                    "POST",
                    f"https://api.github.com/repos/{args.github_repo}/releases",
                    "-u",
                    args.github_creds,
                    "-H",
                    "Accept: application/vnd.github.v3+json",
                    "-d",
                    f'{{"tag_name":"{tag}", "name": "{tag}", "body": {json.dumps(gh_release_body)}}}',
                ]
            )
        )
        try:
            if release.get("errors", False):
                raise ReleaseException("Couldn't create Github release: ", release)
            logger.info(f"Release created: {release['html_url']}")
        except Exception as e:
            print(release)
            raise e

        upload_url, params = release["upload_url"].rsplit("{", 1)
        assert params == "?name,label}"  # them changing means script must be updated
        # example: https://uploads.github.com/repos/owkin/studio-test/releases/42505366/assets{?name,label}

        command.run(
            [
                "curl",
                "--fail",
                (
                    upload_url
                    + f"?name={args.chart}-{final_version}.tgz"
                    + r"&label=Helm%20chart"
                ),
                "-u",
                args.github_creds,
                "-H",
                "Accept: application/vnd.github.v3+json",
                "-H",
                "Content-Type: application/gzip",
                "--data-binary",
                f"@{args.chart}-{final_version}.tgz",
            ]
        )


if __name__ == "__main__":
    exit(main())
